plugins {
    id 'application'
    id 'checkstyle'
    id 'uk.gov.hmcts.java' version '0.12.61'
    id 'pmd'
    id 'jacoco'
    id 'io.spring.dependency-management' version '1.1.5'
    id 'org.springframework.boot' version '3.2.5'
    id 'org.owasp.dependencycheck' version '9.1.0'
    id 'com.github.ben-manes.versions' version '0.51.0'
    id "info.solidsoft.pitest" version '1.15.0'
    id 'org.sonarqube' version '5.0.0.4638'
    id 'com.gorylenko.gradle-git-properties' version '2.4.2'
    id "io.freefair.lombok" version "8.6"
}

group = 'uk.gov.hmcts.reform'
version = '1.0.2'

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(17)
  }
}

tasks.withType(JavaExec).configureEach {
  javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
}

gitProperties {
    gitPropertiesDir = new File("${project.rootDir}/src/main/resources/uk/gov/hmcts/reform/pcqloader/gitcommit")
    keys = ['git.commit.id','git.commit.time']
    dateFormat = "yyyy-MM-dd'T'HH:mmZ"
    dateFormatTimeZone = "GMT"
}

sourceSets {
    test {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir file('src/test/java')
        }
        resources.srcDir file('src/test/resources')
    }

    functionalTest {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir file('src/functionalTest/java')
        }
        resources.srcDir file('src/functionalTest/resources')
    }

    integrationTest {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir file('src/integrationTest/java')
        }
        resources.srcDir file('src/integrationTest/resources')
    }

    smokeTest {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir file('src/smokeTest/java')
        }
        resources.srcDir file('src/smokeTest/resources')
    }
}

configurations {
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntime.extendsFrom testRuntime
    functionalTestImplementation.extendsFrom testImplementation
    functionalTestRuntime.extendsFrom testRuntime
    smokeTestRuntime.extendsFrom testRuntime
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

task unit(type: Test, description: 'Runs the unit tests.', group: 'Verification') {
    testClassesDirs = sourceSets.test.output.classesDirs
    classpath = sourceSets.test.runtimeClasspath
    useJUnitPlatform()
}

task functional(type: Test) {
    group = 'Functional Tests'
    description = 'Verifies that files from functionPreDeploy step were processed following job creation in AKS'
    setTestClassesDirs(sourceSets.functionalTest.output.classesDirs)
    setClasspath(sourceSets.functionalTest.runtimeClasspath)
    include "uk/gov/hmcts/reform/pcqloader/postdeploy/**"
}

task integration(type: Test, description: 'Runs the integration tests.', group: 'Verification') {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    useJUnitPlatform()
}

task fortifyScan(type: JavaExec)  {
    mainClass = "uk.gov.hmcts.fortifyclient.FortifyClientMainApp"
    classpath += sourceSets.test.runtimeClasspath
    jvmArgs = ['--add-opens=java.base/java.lang.reflect=ALL-UNNAMED']
}

checkstyle {
  maxWarnings = 0
  toolVersion = '8.29'
  // need to set configDir to rootDir otherwise submodule will use submodule/config/checkstyle
  configDirectory = new File(rootDir, 'config/checkstyle')
}

pmd {
    sourceSets = [sourceSets.main, sourceSets.test, sourceSets.functionalTest, sourceSets.integrationTest, sourceSets.smokeTest]
    reportsDir = file("$project.buildDir/reports/pmd")
    // https://github.com/pmd/pmd/issues/876
    ruleSets = []
    ruleSetFiles = files("config/pmd/ruleset.xml")
}

project.tasks['jacocoTestReport'].dependsOn test, integration

jacocoTestReport {
    executionData(test, integration)
    reports {
        xml.required = true
        csv.required = false
        xml.outputLocation = file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
    }
}

project.tasks['sonarqube'].dependsOn jacocoTestReport

pitest {
    junit5PluginVersion.set('1.2.1')
    targetClasses = ['uk.gov.hmcts.reform.pcqloader.*']
    threads = 10
    enableDefaultIncrementalAnalysis = true
    outputFormats = ['XML', 'HTML']
    timestampedReports = true
    mutationThreshold = 50
    timeoutConstInMillis = 30000

}

project.tasks['pitest'].group = "Verification"

sonarqube {
    properties {
        property "sonar.projectName", "Reform :: pcq-loader"
        property "sonar.projectKey", "uk.gov.hmcts.reform:pcq-loader"
        property "sonar.coverage.jacoco.xmlReportPaths", "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
        property "sonar.jacoco.reportPath", "${project.buildDir}/jacoco/test.exec"
        property "sonar.pitest.mode", "reuseReport"
        property "sonar.pitest.reportsDirectory", "build/reports/pitest"
    }
}

dependencyUpdates.resolutionStrategy {
    componentSelection { rules ->
        rules.all {
            def isNonStable = { String version ->
                ['alpha', 'beta', 'rc', 'cr', 'm', 'preview', 'b', 'ea'].any { qualifier ->
                    version ==~ /(?i).*[.-]\$qualifier[.\\d-+]*/
                }
            }
            if (isNonStable(candidate.version) && !isNonStable(currentVersion)) {
                selection.reject('Release candidate')
            }
        }
    }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
    // Specifies if the build should be failed if a CVSS score above a specified level is identified.
    // range of 0-10 fails the build, anything greater and it doesn't fail the build
    failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
    suppressionFile = 'config/owasp/suppressions.xml'

    analyzers {
      // Disable scanning of .NET related binaries
      assemblyEnabled = false
    }
}

dependencyManagement {
    dependencies {
        dependency group: 'org.bouncycastle', name: 'bcpkix-jdk15on', version: '1.70'

        // CVE-2021-29425
        dependency group: 'commons-io', name: 'commons-io', version: '2.16.1'

        dependencySet(group: 'org.springframework.cloud', version: '4.1.1') {
          entry 'spring-cloud-starter-openfeign'
          entry 'spring-cloud-openfeign-core'
        }

        dependencySet(group: 'org.springframework.security', version: '6.2.4') {
          entry 'spring-security-core'
          entry 'spring-security-test'
        }
        dependencySet(group: 'io.netty', version: '4.1.109.Final') {
          entry 'netty-buffer'
          entry 'netty-codec'
          entry 'netty-codec-http'
          entry 'netty-codec-http2'
          entry 'netty-codec-socks'
          entry 'netty-common'
          entry 'netty-handler'
          entry 'netty-handler-proxy'
          entry 'netty-resolver'
          entry 'netty-transport'
          entry 'netty-transport-native-epoll'
          entry 'netty-transport-native-kqueue'
          entry 'netty-transport-native-unix-common'
          entry 'netty-codec-dns'
          entry 'netty-resolver-dns'
          entry 'netty-resolver-dns-native-macos'
          entry 'netty-resolver-dns-classes-macos'
          entry 'netty-transport-classes-epoll'
          entry 'netty-transport-classes-kqueue'
        }

      dependencySet(group: 'ch.qos.logback', version: '1.5.6') {
        entry 'logback-core'
        entry 'logback-classic'
      }
    }
    imports {
      mavenBom 'org.springframework.cloud:spring-cloud-dependencies:2023.0.1'
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url 'https://jitpack.io'
    }
}

def versions = [
        jjwt                : '0.11.5',
        junit               : '5.9.2',
        reformLogging       : '6.1.4',
        springBoot          : springBoot.class.package.implementationVersion,
        springfoxSwagger    : '3.0.0',
        restAssured         : '5.4.0',
        lombok              : '1.18.32',
        pitest              : '1.16.1',
        testcontainers      : '1.19.8',
        springSecurity      : '6.1.2'
]

configurations.all {
    resolutionStrategy {
        eachDependency { DependencyResolveDetails details ->
            if (details.requested.group in ['org.apache.logging.log4j']) {
                details.useVersion '2.20.0'
            }
            if (details.requested.group in ['org.scala-lang']) {
                details.useVersion '2.12.10'
            }
            if (details.requested.group in ['org.apache.httpcomponents.httpclient']) {
              details.useVersion '4.5.13'
            }
        }
    }
}

dependencies {
    // exclude spring-cloud-context as it is already included in spring-cloud-starter-netflix-hystrix
    def withoutSpringCloudContext = {
        exclude group: 'org.springframework.cloud', module: 'spring-cloud-context'
    }

    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web', {
      exclude group: 'org.apache.tomcat.embed', module: 'tomcat-embed-websocket'
      exclude group: 'org.apache.tomcat.embed', module: 'tomcat-embed-core'
    }
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web-services'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-json'
    implementation group: 'org.springframework.boot', name: 'spring-boot-configuration-processor'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-security'

    implementation group: 'org.springframework.security', name: 'spring-security-core', version: '6.2.4'

    implementation group: 'com.azure', name: 'azure-storage-blob', version: '12.25.4'

    implementation group: 'io.github.openfeign', name: 'feign-httpclient', version: '13.2.1'

    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation'
    implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-bootstrap',version: '4.1.2'
    implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign', version: '4.1.1'

    implementation group: 'org.projectlombok', name: 'lombok', version: versions.lombok
    implementation group: "com.networknt", name: "json-schema-validator", version: "1.4.0"

    implementation group: 'io.github.openfeign.form', name: 'feign-form', version: '3.8.0'
    implementation group: 'io.github.openfeign.form', name: 'feign-form-spring', version: '3.8.0'
    implementation group: 'io.springfox', name: 'springfox-swagger2', version: versions.springfoxSwagger

    implementation group: 'com.github.hmcts.java-logging', name: 'logging', version: versions.reformLogging
    implementation group: 'net.logstash.logback', name: 'logstash-logback-encoder', version: '7.4'
    implementation group: 'com.microsoft.azure', name: 'applicationinsights-web', version: '3.5.2'

    implementation group: "io.jsonwebtoken", name: "jjwt-api", version: versions.jjwt
    implementation group: "io.jsonwebtoken", name: "jjwt-impl", version: versions.jjwt
    implementation group: 'io.jsonwebtoken', name: 'jjwt-gson', version: versions.jjwt
    implementation group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.14'
    implementation group: 'com.github.hmcts', name: 'pcq-commons', version: '1.2.4'

    implementation group: 'org.yaml', name: 'snakeyaml', version: '2.2'
    implementation group: 'commons-fileupload', name: 'commons-fileupload', version: '1.5'
    implementation group: 'commons-net', name: 'commons-net', version: '3.10.0'
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.14.0'

    implementation group: 'org.apache.tomcat.embed', name: 'tomcat-embed-websocket', version: '10.1.24'
    implementation group: 'org.apache.tomcat.embed', name: 'tomcat-embed-core', version: '10.1.24'

    testImplementation(platform(group: 'org.junit', name: 'junit-bom', version: '5.10.2'))
    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine'
    testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', {
      exclude group: 'junit', module: 'junit'
      exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }

    testImplementation group: 'org.pitest', name: 'pitest', version: versions.pitest
    testImplementation 'info.solidsoft.gradle.pitest:gradle-pitest-plugin:1.15.0'
    testImplementation 'org.codehaus.sonar-plugins:sonar-pitest-plugin:0.5'

    testImplementation group: 'io.rest-assured', name: 'xml-path', version: versions.restAssured
    testImplementation group: 'io.rest-assured', name: 'json-path', version: versions.restAssured

    testImplementation group: 'org.mockito', name: 'mockito-core', version: '5.12.0'
    testImplementation group: 'org.mockito', name: 'mockito-inline', version: '5.2.0'

    testImplementation group: 'com.github.tomakehurst', name: 'wiremock', version: '3.0.1'

    testImplementation 'com.github.hmcts:fortify-client:1.4.1:all'

    testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-webflux'
    testImplementation group: "io.jsonwebtoken", name: "jjwt", version: "0.12.5"
    testImplementation group: "org.testcontainers", name: "junit-jupiter", version: versions.testcontainers

    integrationTestImplementation sourceSets.main.runtimeClasspath
    integrationTestImplementation sourceSets.test.runtimeClasspath

    functionalTestImplementation sourceSets.main.runtimeClasspath
    functionalTestImplementation sourceSets.test.runtimeClasspath
    functionalTestCompileOnly group: 'org.projectlombok', name: 'lombok', version: versions.lombok
    functionalTestAnnotationProcessor group: 'org.projectlombok', name: 'lombok', version: versions.lombok

    smokeTestImplementation group: 'io.rest-assured', name: 'rest-assured', version: versions.restAssured
    smokeTestRuntime group: 'io.rest-assured', name: 'xml-path', version: versions.restAssured
    smokeTestRuntime group: 'io.rest-assured', name: 'json-path', version: versions.restAssured
    smokeTestRuntime group: 'io.rest-assured', name: 'kotlin-extensions', version: versions.restAssured

    smokeTestImplementation sourceSets.main.runtimeClasspath
    smokeTestImplementation sourceSets.test.runtimeClasspath
}

test {
    useJUnitPlatform()
    failFast = true
}

application {
  mainClass = 'uk.gov.hmcts.reform.pcqloader.PcqLoaderApplication'
}

bootJar {
    archiveFileName = 'pcq-loader.jar'

    manifest {
        attributes('Implementation-Version': project.version.toString())
    }
}

rootProject.tasks.named("processTestResources") {
  duplicatesStrategy = 'include'
}

rootProject.tasks.named("processFunctionalTestResources") {
  duplicatesStrategy = 'include'
}

rootProject.tasks.named("processIntegrationTestResources") {
  duplicatesStrategy = 'include'
}

rootProject.tasks.named("processSmokeTestResources") {
  duplicatesStrategy = 'include'
}

rootProject.tasks.named("processResources") {
  dependsOn("generateGitProperties")
}
